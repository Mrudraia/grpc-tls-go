// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: proto/rosa_gateway.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RosaServiceClient is the client API for RosaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RosaServiceClient interface {
	InstallAgent(ctx context.Context, in *InstallRequest, opts ...grpc.CallOption) (*InstallResponse, error)
}

type rosaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRosaServiceClient(cc grpc.ClientConnInterface) RosaServiceClient {
	return &rosaServiceClient{cc}
}

func (c *rosaServiceClient) InstallAgent(ctx context.Context, in *InstallRequest, opts ...grpc.CallOption) (*InstallResponse, error) {
	out := new(InstallResponse)
	err := c.cc.Invoke(ctx, "/pb.RosaService/InstallAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RosaServiceServer is the server API for RosaService service.
// All implementations must embed UnimplementedRosaServiceServer
// for forward compatibility
type RosaServiceServer interface {
	InstallAgent(context.Context, *InstallRequest) (*InstallResponse, error)
	mustEmbedUnimplementedRosaServiceServer()
}

// UnimplementedRosaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRosaServiceServer struct {
}

func (UnimplementedRosaServiceServer) InstallAgent(context.Context, *InstallRequest) (*InstallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallAgent not implemented")
}
func (UnimplementedRosaServiceServer) mustEmbedUnimplementedRosaServiceServer() {}

// UnsafeRosaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RosaServiceServer will
// result in compilation errors.
type UnsafeRosaServiceServer interface {
	mustEmbedUnimplementedRosaServiceServer()
}

func RegisterRosaServiceServer(s grpc.ServiceRegistrar, srv RosaServiceServer) {
	s.RegisterService(&RosaService_ServiceDesc, srv)
}

func _RosaService_InstallAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RosaServiceServer).InstallAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RosaService/InstallAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RosaServiceServer).InstallAgent(ctx, req.(*InstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RosaService_ServiceDesc is the grpc.ServiceDesc for RosaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RosaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RosaService",
	HandlerType: (*RosaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InstallAgent",
			Handler:    _RosaService_InstallAgent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rosa_gateway.proto",
}
