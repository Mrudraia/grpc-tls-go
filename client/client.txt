package main

import (
	"context"
	"crypto/tls"
	"crypto/x509"
	"io/ioutil"
	"log"
	"time"

	pb "github.com/mrudraia/grpc-tls-go/pb/proto"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials"
)

func main() {
	// read ca's cert
	caCert, err := ioutil.ReadFile("cert/ca-cert.pem")
	if err != nil {
		log.Fatal(caCert)
	}

	// create cert pool and append ca's cert
	certPool := x509.NewCertPool()
	if ok := certPool.AppendCertsFromPEM(caCert); !ok {
		log.Fatal(err)
	}

	//read client cert
	clientCert, err := tls.LoadX509KeyPair("cert/client-cert.pem", "cert/client-key.pem")
	if err != nil {
		log.Fatal(err)
	}

	config := &tls.Config{
		Certificates: []tls.Certificate{clientCert},
		RootCAs:      certPool,
	}

	tlsCredential := credentials.NewTLS(config)

	// create client connection
	conn, err := grpc.Dial(
		"0.0.0.0:9000",
		grpc.WithTransportCredentials(tlsCredential),
	)

	if err != nil {
		log.Fatal(err)
	}

	defer conn.Close()

	client := pb.NewRosaServiceClient(conn)
	// contact the server and print out its response
	ctx2, cancel := context.WithTimeout(context.Background(), time.Second)
	defer cancel()

	resp, err := client.InstallAgent(ctx2, &pb.InstallRequest{Name: "djnd", Kind: "sdsd", Data: []byte{1, 2, 3}})
	if err != nil {
		log.Fatal(err)
	}

	log.Printf("The response from the server is: %v and res is %v", resp.GetCode(), resp.GetResponse())

}
